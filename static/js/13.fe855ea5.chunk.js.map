{"version":3,"sources":["views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/Profile/utils/sortUserActivity.tsx","views/Nft/market/Profile/components/EditProfileAvatar.tsx","views/Nft/market/Profile/components/ProfileHeader.tsx","views/Nft/market/Profile/components/TabMenu.tsx","views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","views/Nft/market/Profile/components/Achievements/ClaimPointsCallout.tsx","views/Nft/market/Profile/components/Achievements/index.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityEventText.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityPrice.tsx","views/Nft/market/Profile/components/ActivityHistory/MobileModal.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityRow.tsx","views/Nft/market/Profile/components/ActivityHistory/TableLoader.tsx","views/Nft/market/Profile/components/NoNftsImage.tsx","views/Nft/market/Profile/components/ActivityHistory/index.tsx","views/Nft/market/Profile/components/SubMenu.tsx","views/Nft/market/Profile/components/UserNfts.tsx","views/Nft/market/Profile/ConnectedProfile.tsx","state/achievements/hooks.ts","views/Nft/market/Profile/hooks/useNftsForAddress.tsx","views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","views/Nft/market/Profile/UnconnectedProfile.tsx","views/Nft/market/Profile/index.tsx","../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/StatBox.tsx","views/Teams/components/IconStatBox.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx"],"names":["StyledBannerImage","styled","div","attrs","alt","src","theme","colors","cardBorder","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","children","props","flexDirection","mb","position","pb","BannerImage","bottom","left","alignItems","MarketEvent","EditOverlay","StyledEditProfileAvatar","EditProfileAvatar","useModal","EditProfileModal","onEditProfileModal","onClick","AvatarImage","StyledIconButton","IconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","isAchievementsLoading","isNftLoading","isProfileLoading","t","useTranslation","account","useWeb3React","isConnectedAccount","toLowerCase","numNftCollected","formatNumber","numPoints","points","numAchievements","length","avatarImage","nft","image","thumbnail","imagePath","teamId","getBannerImage","display","target","as","href","getBscScanLink","width","color","MarketPageTitle","title","username","truncateHash","description","mr","external","bold","mt","to","StatBox","stat","Tab","button","$active","secondary","textSubtle","background","TabMenu","accountAddress","useParams","pathname","useLocation","useState","includes","achievementsActive","setIsAchievementsActive","useEffect","RouterLink","nftsBaseUrl","NoBadgePlaceholder","BunnyPlaceholderIcon","StyledAchievementAvatar","img","AchievementAvatar","badge","AchievementTitle","key","data","Description","Text","fontSize","AchievementDescription","Details","Flex","AchievementCard","achievement","toLocaleString","Grid","AchievementsList","map","id","justifyContent","style","height","scale","PointsLabel","localePoints","num","ActionColumn","StyledAchievementRow","Body","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","useToast","toastError","toastSuccess","callWithGasPrice","useCallWithGasPrice","handleCollectPoints","a","address","tx","wait","receipt","status","Toast","txHash","transactionHash","px","isLoading","endIcon","spin","disabled","variant","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","dispatch","useAppDispatch","useProfile","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","filter","prevClaimableAchievement","isActive","totalPointsToCollect","sumBy","Achievements","IconStatBox","icon","PrizeIcon","subtitle","sortUserActivity","userActivities","askOrderHistory","buyTradeHistory","sellTradeHistory","transformTransactions","transactions","transaction","userSeller","seller","marketEvent","SELL","BUY","timestamp","price","askPrice","otherParty","buyer","allActivity","askOrder","orderType","AskOrderType","CANCEL","MODIFY","NEW","getAskOrderEvent","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ActivityEventText","events","text","ActivityPrice","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","justifySelf","maxWidth","undefined","minimumFractionDigits","maximumFractionDigits","RoundedImage","Image","radii","default","MobileModal","activity","localeTimestamp","onDismiss","chainId","useActiveWeb3React","useTheme","priceAsFloat","parseFloat","headerBackground","gradients","cardHeader","textAlign","collectionName","name","p","pt","Link","ActivityRow","useMatchBreakpoints","isXs","isSm","timestampAsMs","Date","year","month","day","hour","minute","onPresentMobileModal","ProfileCell","GridItem","LoadingRow","TableLoader","NoNftsImage","ActivityHistory","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","setSortedUserActivities","setIsLoading","useUserNfts","userActivity","userNftsInitializationState","useBNBBusdPrice","UserNftInitializationState","INITIALIZED","isAddress","toLocaleLowerCase","fetchAddressActivity","getUserActivity","addressActivity","console","error","fetchUserActivity","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","tokenId","collectionAddress","collection","getNftsFromDifferentCollectionsApi","nfts","max","Math","ceil","getMaxPages","slice","getActivitiesSlice","nftMeta","find","metaNft","borderTop","page","SubMenuComponent","ItemsConfig","label","BaseSubMenu","items","activeItem","UserNfts","location","clickedProfileNft","setClickedProfileNft","clickedSellNft","setClickedSellNft","ProfileNftModal","onPresentProfileNftModal","SellModal","nftToSell","onPresentSellModal","gridGap","gridTemplateColumns","marketData","isUserNft","NftLocation","PROFILE","WALLET","FORSALE","handleCollectibleClick","currentAskPrice","isTradable","nftLocation","GridPlaceholder","TabMenuWrapper","Box","ConnectedProfile","useSelector","state","achievementFetchStatus","userNfts","fetchAchievements","useFetchAchievements","useFetchUserNfts","MarketPageHeader","AchievementFetchStatus","FETCHED","Page","minHeight","path","SubMenu","exact","useNftsForAddress","isProfileFetching","combinedNfts","setCombinedNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","getNfts","getCompleteAccountNftData","completeNftData","isEmpty","UnconnectedProfile","useProfileForAddress","profileHookState","isFetching","useAchievementsForAddress","isAchievementFetching","UnconnectedProfileNfts","NftProfile","isConnectedProfile","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","min","module","exports","n","iteratee","index","result","toFinite","value","remainder","identity","GridPlaceholderItem","numItems","times","itemKey","isDark","borderColor","StatBoxItem","mx","fontWeight","invertedContrast","card","SecondaryCard","tertiary","defaultProps","Icon","isDisabled","textTransform","SubMenuItems"],"mappings":"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","file":"static/js/13.fe855ea5.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import { ethers } from 'ethers'\r\nimport { AskOrder, AskOrderType, TokenMarketData, Transaction } from 'state/nftMarket/types'\r\n\r\nexport enum MarketEvent {\r\n  NEW = 'NEW',\r\n  CANCEL = 'CANCEL',\r\n  MODIFY = 'MODIFY',\r\n  BUY = 'BUY',\r\n  SELL = 'SELL',\r\n}\r\n\r\nexport interface Activity {\r\n  marketEvent: MarketEvent\r\n  timestamp: string\r\n  tx: string\r\n  nft?: TokenMarketData\r\n  price?: string\r\n  otherParty?: string\r\n}\r\n\r\nexport const sortUserActivity = (\r\n  account: string,\r\n  userActivities: { askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] },\r\n): Activity[] => {\r\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivities\r\n\r\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\r\n    switch (orderType) {\r\n      case AskOrderType.CANCEL:\r\n        return MarketEvent.CANCEL\r\n      case AskOrderType.MODIFY:\r\n        return MarketEvent.MODIFY\r\n      case AskOrderType.NEW:\r\n        return MarketEvent.NEW\r\n      default:\r\n        return MarketEvent.MODIFY\r\n    }\r\n  }\r\n\r\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\r\n    const transformedTransactions = transactions.map((transaction) => {\r\n      const userSeller = transaction.seller.id === account.toLowerCase()\r\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\r\n      const { timestamp, nft } = transaction\r\n      const price = transaction.askPrice\r\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\r\n      const tx = transaction.id\r\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\r\n    })\r\n\r\n    return transformedTransactions\r\n  }\r\n\r\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\r\n    const transformedAskOrders = askOrders.map((askOrder) => {\r\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\r\n      const { timestamp, nft } = askOrder\r\n      const price = askOrder.askPrice\r\n      const tx = askOrder.id\r\n      return { marketEvent, price, timestamp, nft, tx }\r\n    })\r\n\r\n    return transformedAskOrders\r\n  }\r\n\r\n  const allActivity = [\r\n    ...transformAskOrders(askOrderHistory),\r\n    ...transformTransactions(buyTradeHistory),\r\n    ...transformTransactions(sellTradeHistory),\r\n  ]\r\n  if (allActivity.length > 0) {\r\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\r\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\r\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\r\n      return timestamp2.sub(timestamp1).toNumber()\r\n    })\r\n\r\n    return sortedByMostRecent\r\n  }\r\n  return []\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useModal } from '@pancakeswap/uikit'\r\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\r\nimport EditProfileModal from './EditProfileModal'\r\n\r\nconst EditOverlay = styled.div`\r\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\r\n  border-radius: 50%;\r\n  left: 0;\r\n  height: 100%;\r\n  opacity: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: opacity 300ms;\r\n  width: 100%;\r\n  z-index: 1;\r\n`\r\n\r\nconst StyledEditProfileAvatar = styled.div`\r\n  position: relative;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n\r\n    ${EditOverlay} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`\r\n\r\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string }> = ({ src, alt }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\r\n      <AvatarImage src={src} alt={alt} />\r\n      <EditOverlay />\r\n    </StyledEditProfileAvatar>\r\n  )\r\n}\r\n\r\nexport default EditProfileAvatar\r\n","import React from 'react'\r\nimport { Link as ReactRouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { Achievement, Profile } from 'state/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport EditProfileAvatar from './EditProfileAvatar'\r\nimport BannerHeader from '../../components/BannerHeader'\r\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\r\nimport MarketPageTitle from '../../components/MarketPageTitle'\r\nimport EditProfileModal from './EditProfileModal'\r\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\r\n\r\ninterface HeaderProps {\r\n  accountPath: string\r\n  profile: Profile\r\n  achievements: Achievement[]\r\n  nftCollected: number\r\n  isAchievementsLoading: boolean\r\n  isNftLoading: boolean\r\n  isProfileLoading: boolean\r\n}\r\n\r\nconst StyledIconButton = styled(IconButton)`\r\n  width: fit-content;\r\n`\r\n\r\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\r\nconst ProfileHeader: React.FC<HeaderProps> = ({\r\n  accountPath,\r\n  profile,\r\n  achievements,\r\n  nftCollected,\r\n  isAchievementsLoading,\r\n  isNftLoading,\r\n  isProfileLoading,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\r\n  const numNftCollected = !isNftLoading ? (nftCollected ? formatNumber(nftCollected, 0, 0) : '-') : null\r\n  const numPoints = !isProfileLoading ? (profile?.points ? formatNumber(profile.points, 0, 0) : '-') : null\r\n  const numAchievements = !isAchievementsLoading\r\n    ? achievements?.length\r\n      ? formatNumber(achievements.length, 0, 0)\r\n      : '-'\r\n    : null\r\n\r\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\r\n\r\n  const getBannerImage = () => {\r\n    const imagePath = '/images/teams'\r\n    if (profile) {\r\n      switch (profile.teamId) {\r\n        case 1:\r\n          return `${imagePath}/storm-banner.png`\r\n        case 2:\r\n          return `${imagePath}/flippers-banner.png`\r\n        case 3:\r\n          return `${imagePath}/cakers-banner.png`\r\n        default:\r\n          break\r\n      }\r\n    }\r\n    return `${imagePath}/no-team-banner.png`\r\n  }\r\n\r\n  const getAvatar = () => {\r\n    const getIconButtons = () => {\r\n      return (\r\n        // TODO: Share functionality once user profiles routed by ID\r\n        <Flex display=\"inline-flex\">\r\n          {accountPath && (\r\n            <StyledIconButton\r\n              target=\"_blank\"\r\n              as=\"a\"\r\n              href={getBscScanLink(accountPath, 'address')}\r\n              alt={t('View BscScan for user address')}\r\n            >\r\n              <BscScanIcon width=\"20px\" color=\"primary\" />\r\n            </StyledIconButton>\r\n          )}\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    const getImage = () => {\r\n      return (\r\n        <>\r\n          {profile && accountPath && isConnectedAccount ? (\r\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\r\n          ) : (\r\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        {getImage()}\r\n        {getIconButtons()}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getTitle = () => {\r\n    if (profile?.username) {\r\n      return `@${profile.username}`\r\n    }\r\n\r\n    if (accountPath) {\r\n      return truncateHash(accountPath, 5, 3)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  const renderDescription = () => {\r\n    const getActivateButton = () => {\r\n      if (!profile) {\r\n        return (\r\n          <ReactRouterLink to=\"/create-profile\">\r\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\r\n          </ReactRouterLink>\r\n        )\r\n      }\r\n      return (\r\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\r\n        {accountPath && profile?.username && (\r\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\r\n            {truncateHash(accountPath)}\r\n          </Link>\r\n        )}\r\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\r\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\r\n        <StatBox>\r\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\r\n          <StatBoxItem title={t('Points')} stat={numPoints} />\r\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\r\n        </StatBox>\r\n      </MarketPageTitle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileHeader\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Link as RouterLink, useLocation, useParams } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst Tab = styled.button<{ $active: boolean }>`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\r\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\r\n  border-style: solid solid none solid;\r\n  border-color: ${({ theme }) =>\r\n    `${theme.colors.cardBorder} ${theme.colors.cardBorder} transparent ${theme.colors.cardBorder}`};\r\n  outline: 0;\r\n  padding: 12px 16px;\r\n  border-radius: 16px 16px 0 0;\r\n  font-size: 16px;\r\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\r\n  background-color: ${({ theme, $active }) => ($active ? theme.colors.background : 'transparent')};\r\n  transition: background-color 0.3s ease-out;\r\n`\r\n\r\nconst TabMenu = () => {\r\n  const { t } = useTranslation()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { pathname } = useLocation()\r\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\r\n\r\n  useEffect(() => {\r\n    setIsAchievementsActive(pathname.includes('achievements'))\r\n  }, [pathname])\r\n\r\n  return (\r\n    <Flex>\r\n      <Tab\r\n        onClick={() => setIsAchievementsActive(false)}\r\n        $active={!achievementsActive}\r\n        as={RouterLink}\r\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\r\n      >\r\n        NFTs\r\n      </Tab>\r\n      <Tab\r\n        onClick={() => setIsAchievementsActive(true)}\r\n        $active={achievementsActive}\r\n        as={RouterLink}\r\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\r\n      >\r\n        {t('Achievements')}\r\n      </Tab>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TabMenu\r\n","import React, { ImgHTMLAttributes } from 'react'\r\nimport styled from 'styled-components'\r\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\r\n\r\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\r\n  badge?: string\r\n}\r\n\r\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\r\n  height: 48px;\r\n  width: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 64px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst StyledAchievementAvatar = styled.img`\r\n  height: 48px;\r\n  width: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 64px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\r\n  if (!badge) {\r\n    return <NoBadgePlaceholder />\r\n  }\r\n\r\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\r\n}\r\n\r\nexport default AchievementAvatar\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\r\n\r\ninterface AchievementTitleProps extends TextProps {\r\n  title: AchievementTitleType\r\n}\r\n\r\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (typeof title === 'string') {\r\n    return (\r\n      <Text bold {...props}>\r\n        {title}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  const { key, data = {} } = title\r\n\r\n  return (\r\n    <Text bold {...props}>\r\n      {t(key, data)}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default AchievementTitle\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\r\nimport styled from 'styled-components'\r\n\r\ninterface AchievementDescriptionProps extends TextProps {\r\n  description?: AchievementDescriptionType\r\n}\r\n\r\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (!description) {\r\n    return null\r\n  }\r\n\r\n  if (typeof description === 'string') {\r\n    return (\r\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\r\n        {description}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  const { key, data = {} } = description\r\n\r\n  return (\r\n    <Description color=\"textSubtle\" {...props}>\r\n      {t(key, data)}\r\n    </Description>\r\n  )\r\n}\r\n\r\nexport default AchievementDescription\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\r\nimport { Achievement } from 'state/types'\r\nimport AchievementAvatar from './AchievementAvatar'\r\nimport AchievementTitle from './AchievementTitle'\r\nimport AchievementDescription from './AchievementDescription'\r\n\r\ninterface AchievementCardProps {\r\n  achievement: Achievement\r\n}\r\n\r\nconst Details = styled(Flex)`\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n`\r\n\r\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\r\n  return (\r\n    <Flex>\r\n      <AchievementAvatar badge={achievement.badge} />\r\n      <Details>\r\n        <AchievementTitle title={achievement.title} />\r\n        <AchievementDescription description={achievement.description} />\r\n      </Details>\r\n      <Flex alignItems=\"center\">\r\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\r\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AchievementCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Achievement } from 'state/types'\r\nimport AchievementCard from './AchievementCard'\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst AchievementsList: React.FC<{ achievements: Achievement[] }> = ({ achievements }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        {achievements.map((achievement) => (\r\n          <AchievementCard key={achievement.id} achievement={achievement} />\r\n        ))}\r\n      </Grid>\r\n      {achievements.length === 0 && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\r\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\r\n            {t('No achievements yet!')}\r\n          </Heading>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AchievementsList\r\n","import React from 'react'\r\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface PointsLabelProps extends FlexProps {\r\n  points: number\r\n}\r\n\r\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const localePoints = points.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" {...props}>\r\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\r\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default PointsLabel\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\r\nimport { Achievement } from 'state/types'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePointCenterIfoContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\r\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\r\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\r\nimport PointsLabel from './PointsLabel'\r\n\r\ninterface AchievementRowProps {\r\n  achievement: Achievement\r\n  onCollectSuccess?: (achievement: Achievement) => void\r\n}\r\n\r\nconst ActionColumn = styled.div`\r\n  flex: none;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-width: 160px;\r\n\r\n    & > button {\r\n      width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledAchievementRow = styled(Flex)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding-bottom: 16px;\r\n  padding-top: 16px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nconst Body = styled(Flex)`\r\n  flex-direction: column;\r\n  flex: 1;\r\n  margin-left: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    align-items: center;\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\r\n  const [isCollecting, setIsCollecting] = useState(false)\r\n  const { t } = useTranslation()\r\n  const pointCenterContract = usePointCenterIfoContract()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const handleCollectPoints = async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\r\n      setIsCollecting(true)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onCollectSuccess(achievement)\r\n        toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      } else {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsCollecting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledAchievementRow>\r\n      <AchievementAvatar badge={achievement.badge} />\r\n      <Body>\r\n        <Details>\r\n          <AchievementTitle title={achievement.title} />\r\n          <AchievementDescription description={achievement.description} />\r\n        </Details>\r\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\r\n        <ActionColumn>\r\n          <Button\r\n            onClick={handleCollectPoints}\r\n            isLoading={isCollecting}\r\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            disabled={isCollecting}\r\n            variant=\"secondary\"\r\n          >\r\n            {t('Collect')}\r\n          </Button>\r\n        </ActionColumn>\r\n      </Body>\r\n    </StyledAchievementRow>\r\n  )\r\n}\r\n\r\nexport default AchievementRow\r\n","import React, { useEffect, useState } from 'react'\r\nimport { sumBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Achievement } from 'state/types'\r\nimport { addPoints } from 'state/profile'\r\nimport { addAchievement } from 'state/achievements'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getClaimableIfoData } from 'utils/achievements'\r\nimport AchievementRow from './AchievementRow'\r\n\r\nconst ClaimPointsCallout = () => {\r\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchIfoClaims = async () => {\r\n      const ifoData = await getClaimableIfoData(account)\r\n      setClaimableAchievement(ifoData)\r\n    }\r\n\r\n    if (account) {\r\n      fetchIfoClaims()\r\n    }\r\n  }, [account, dispatch, setClaimableAchievement])\r\n\r\n  const handleCollectSuccess = (achievement: Achievement) => {\r\n    dispatch(addAchievement(achievement))\r\n    dispatch(addPoints(achievement.points))\r\n\r\n    setClaimableAchievement((prevClaimableAchievements) =>\r\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\r\n    )\r\n  }\r\n\r\n  if (!profile?.isActive) {\r\n    return null\r\n  }\r\n\r\n  if (claimableAchievements.length === 0) {\r\n    return null\r\n  }\r\n\r\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\r\n\r\n  return (\r\n    <Card isActive mb=\"32px\">\r\n      <CardHeader>\r\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\r\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\r\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\r\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\r\n          </Flex>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {claimableAchievements.map((achievement) => (\r\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\r\n        ))}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ClaimPointsCallout\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, PrizeIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport IconStatBox from 'views/Teams/components/IconStatBox'\r\nimport { Achievement } from 'state/types'\r\nimport AchievementsList from './AchievementsList'\r\nimport ClaimPointsCallout from './ClaimPointsCallout'\r\n\r\nconst Achievements: React.FC<{ achievements: Achievement[]; points?: number }> = ({ achievements, points = 0 }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\r\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\r\n          {t('Achievements')}\r\n        </Heading>\r\n        <ClaimPointsCallout />\r\n        <AchievementsList achievements={achievements} />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Achievements\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../utils/sortUserActivity'\r\n\r\ninterface ActivityEventTextProps extends TextProps {\r\n  marketEvent: MarketEvent\r\n}\r\n\r\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const events = {\r\n    [MarketEvent.NEW]: {\r\n      text: t('Listed'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.CANCEL]: {\r\n      text: t('Delisted'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.MODIFY]: {\r\n      text: t('Modified'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.BUY]: {\r\n      text: t('Bought'),\r\n      color: 'success',\r\n    },\r\n    [MarketEvent.SELL]: {\r\n      text: t('Sold'),\r\n      color: 'failure',\r\n    },\r\n  }\r\n\r\n  return (\r\n    <Text {...props} color={events[marketEvent].color}>\r\n      {events[marketEvent].text}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default ActivityEventText\r\n","import React from 'react'\r\nimport { Flex, BinanceIcon, Text } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n      {price ? (\r\n        <>\r\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\r\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n            <Text maxWidth=\"80px\" bold>\r\n              {price.toLocaleString(undefined, {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 5,\r\n              })}\r\n            </Text>\r\n          </Flex>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`(~$${priceInUsd.toLocaleString(undefined, {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2,\r\n            })})`}\r\n          </Text>\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ActivityPrice\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Activity } from '../../utils/sortUserActivity'\r\nimport ActivityEventText from './ActivityEventText'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface MobileModalProps extends InjectedModalProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  localeTimestamp: string\r\n}\r\n\r\nconst MobileModal: React.FC<MobileModalProps> = ({ nft, activity, bnbBusdPrice, localeTimestamp, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\r\n\r\n  return (\r\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex alignItems=\"center\" mb=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            <Text bold>{nft.name}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <LightGreyCard p=\"16px\">\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\r\n            {priceAsFloat ? (\r\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n                <Text mr=\"4px\" bold>\r\n                  {priceAsFloat}\r\n                </Text>\r\n                <Text color=\"textSubtle\">\r\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })}`}\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </Flex>\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('From/To')}\r\n            </Text>\r\n            <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('Date')}\r\n            </Text>\r\n            <Text>{localeTimestamp}</Text>\r\n          </Flex>\r\n        </LightGreyCard>\r\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\r\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            {t('View on BscScan')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MobileModal\r\n","import React from 'react'\r\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport { Activity } from '../../utils/sortUserActivity'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport ActivityPrice from './ActivityPrice'\r\nimport MobileModal from './MobileModal'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface ActivityRowProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nconst ActivityRow: React.FC<ActivityRowProps> = ({ activity, bnbBusdPrice, nft }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\r\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  })\r\n  const [onPresentMobileModal] = useModal(\r\n    <MobileModal nft={nft} activity={activity} localeTimestamp={localeTimestamp} bnbBusdPrice={bnbBusdPrice} />,\r\n  )\r\n\r\n  return (\r\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\r\n      <Td>\r\n        <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\r\n          <RoundedImage\r\n            src={nft?.image.thumbnail}\r\n            alt={nft?.name}\r\n            width={64}\r\n            height={64}\r\n            mr={[0, null, '16px']}\r\n            mb={['8px', null, 0]}\r\n          />\r\n          <Flex flexDirection=\"column\">\r\n            <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\r\n              {nft?.collectionName}\r\n            </Text>\r\n            <Text textAlign={['center', null, 'left']} bold>\r\n              {nft?.name}\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      </Td>\r\n      <Td>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <ActivityEventText marketEvent={activity.marketEvent} />\r\n        </Flex>\r\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\r\n          </Td>\r\n          <Td>\r\n            <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n              {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\r\n            </Flex>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <Flex justifyContent=\"center\">\r\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\r\n            {localeTimestamp}\r\n          </Text>\r\n        </Flex>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <Td>\r\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Td>\r\n      )}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ActivityRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\r\n\r\nconst GridItem = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nconst LoadingRow: React.FC = () => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <tr>\r\n      <Td>\r\n        <GridItem>\r\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\r\n        </GridItem>\r\n      </Td>\r\n      <Td>\r\n        <GridItem justifyContent=\"flex-end\">\r\n          <Skeleton height={[66, null, 24]} width={64} />\r\n        </GridItem>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={42} width={64} />\r\n            </GridItem>\r\n          </Td>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={48} width={124} />\r\n            </GridItem>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <GridItem justifyContent=\"center\">\r\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\r\n        </GridItem>\r\n      </Td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nexport default TableLoader\r\n","import styled from 'styled-components'\r\n\r\nconst NoNftsImage = styled.div`\r\n  background: url('/images/nfts/no-profile-md.png');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default NoNftsImage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { uniqBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { fetchUserActivity } from 'state/nftMarket/reducer'\r\nimport { useAppDispatch } from 'state'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { ArrowBackIcon, ArrowForwardIcon, Card, Flex, Table, Text, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { getNftsFromDifferentCollectionsApi, getUserActivity } from 'state/nftMarket/helpers'\r\nimport { NftToken, TokenIdWithCollectionAddress, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useParams } from 'react-router'\r\nimport { Activity, sortUserActivity } from '../../utils/sortUserActivity'\r\nimport ActivityRow from './ActivityRow'\r\nimport TableLoader from './TableLoader'\r\nimport NoNftsImage from '../NoNftsImage'\r\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\r\n\r\nconst MAX_PER_PAGE = 8\r\n\r\nconst ActivityHistory = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [maxPage, setMaxPages] = useState(1)\r\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\r\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\r\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const { activity: userActivity, userNftsInitializationState } = useUserNfts()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  useEffect(() => {\r\n    if (account && userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\r\n      const differentAddress =\r\n        accountAddress && isAddress(accountAddress)\r\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\r\n          : false\r\n      if (!differentAddress) {\r\n        setSortedUserActivities(sortUserActivity(account, userActivity))\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n  }, [account, userNftsInitializationState, userActivity, accountAddress])\r\n\r\n  useEffect(() => {\r\n    const fetchAddressActivity = async () => {\r\n      try {\r\n        const addressActivity = await getUserActivity(accountAddress.toLocaleLowerCase())\r\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        console.error('Failed to fetch address activity', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      const differentAddress =\r\n        accountAddress && isAddress(accountAddress)\r\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\r\n          : false\r\n      if (differentAddress) {\r\n        fetchAddressActivity()\r\n      } else {\r\n        dispatch(fetchUserActivity(account))\r\n      }\r\n    } else if (accountAddress && isAddress(accountAddress)) {\r\n      fetchAddressActivity()\r\n    }\r\n  }, [account, accountAddress, dispatch])\r\n\r\n  useEffect(() => {\r\n    const fetchActivityNftMetadata = async () => {\r\n      const activityNftTokenIds = uniqBy(\r\n        sortedUserActivities.map((activity): TokenIdWithCollectionAddress => {\r\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\r\n        }),\r\n        'tokenId',\r\n      )\r\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\r\n      setNftMetadata(nfts)\r\n    }\r\n\r\n    const getMaxPages = () => {\r\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\r\n      setMaxPages(max)\r\n    }\r\n\r\n    if (sortedUserActivities.length > 0) {\r\n      getMaxPages()\r\n      fetchActivityNftMetadata()\r\n    }\r\n\r\n    return () => {\r\n      setActivitiesSlice([])\r\n      setNftMetadata([])\r\n      setMaxPages(1)\r\n      setCurrentPage(1)\r\n    }\r\n  }, [sortedUserActivities])\r\n\r\n  useEffect(() => {\r\n    const getActivitiesSlice = () => {\r\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\r\n      setActivitiesSlice(slice)\r\n    }\r\n    if (sortedUserActivities.length > 0) {\r\n      getActivitiesSlice()\r\n    }\r\n  }, [sortedUserActivities, currentPage])\r\n\r\n  return (\r\n    <Card>\r\n      is pb\r\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFT market history found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : (\r\n        <>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\r\n                <Th textAlign=\"right\"> {t('Event')}</Th>\r\n                {isXs || isSm ? null : (\r\n                  <>\r\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\r\n                    <Th textAlign=\"right\"> {t('From/To')}</Th>\r\n                  </>\r\n                )}\r\n                <Th textAlign=\"center\"> {t('Date')}</Th>\r\n                {isXs || isSm ? null : <Th />}\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {isLoading ? (\r\n                <TableLoader />\r\n              ) : (\r\n                activitiesSlice.map((activity) => {\r\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\r\n                  return (\r\n                    <ActivityRow\r\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\r\n                      activity={activity}\r\n                      nft={nftMeta}\r\n                      bnbBusdPrice={bnbBusdPrice}\r\n                    />\r\n                  )\r\n                })\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n          <Flex\r\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\r\n            pt=\"24px\"\r\n            flexDirection=\"column\"\r\n            justifyContent=\"space-between\"\r\n            height=\"100%\"\r\n          >\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\r\n                }}\r\n              >\r\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n            </PageButtons>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ActivityHistory\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport BaseSubMenu from '../../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../../constants'\r\n\r\nconst SubMenuComponent: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { pathname } = useLocation()\r\n\r\n  const ItemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\r\n    },\r\n    {\r\n      label: t('Activity'),\r\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\r\n    },\r\n  ]\r\n\r\n  return <BaseSubMenu items={ItemsConfig} activeItem={pathname} justifyContent=\"flex-start\" mb=\"60px\" />\r\n}\r\n\r\nexport default SubMenuComponent\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport ProfileNftModal from '../../components/ProfileNftModal'\r\nimport NoNftsImage from './NoNftsImage'\r\nimport SellModal from '../../components/BuySellModals/SellModal'\r\n\r\ninterface ProfileNftProps {\r\n  nft: NftToken\r\n  location: NftLocation\r\n}\r\n\r\ninterface SellNftProps {\r\n  nft: NftToken\r\n  location: NftLocation\r\n  variant: 'sell' | 'edit'\r\n}\r\n\r\nconst UserNfts = () => {\r\n  const { nfts, userNftsInitializationState } = useUserNfts()\r\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\r\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\r\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\r\n  const { t } = useTranslation()\r\n\r\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\r\n    switch (location) {\r\n      case NftLocation.PROFILE:\r\n        setClickedProfileNft({ nft, location })\r\n        break\r\n      case NftLocation.WALLET:\r\n        setClickedSellNft({ nft, location, variant: 'sell' })\r\n        break\r\n      case NftLocation.FORSALE:\r\n        setClickedSellNft({ nft, location, variant: 'edit' })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (clickedProfileNft.nft) {\r\n      onPresentProfileNftModal()\r\n    }\r\n    // exhaustive deps disabled as the useModal dep causes re-render loop\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [clickedProfileNft])\r\n\r\n  useEffect(() => {\r\n    if (clickedSellNft.nft) {\r\n      onPresentSellModal()\r\n    }\r\n    // exhaustive deps disabled as the useModal dep causes re-render loop\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [clickedSellNft])\r\n\r\n  return (\r\n    <>\r\n      {/* User has no NFTs */}\r\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFTs found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : // User has NFTs and data has been fetched\r\n      nfts.length > 0 ? (\r\n        <Grid\r\n          gridGap=\"16px\"\r\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n          alignItems=\"start\"\r\n        >\r\n          {nfts.map((nft) => {\r\n            const { marketData, location } = nft\r\n\r\n            return (\r\n              <CollectibleActionCard\r\n                isUserNft\r\n                onClick={() => handleCollectibleClick(nft, location)}\r\n                key={`${nft.tokenId}-${nft.collectionName}`}\r\n                nft={nft}\r\n                currentAskPrice={\r\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\r\n                }\r\n                nftLocation={location}\r\n              />\r\n            )\r\n          })}\r\n        </Grid>\r\n      ) : (\r\n        // User NFT data hasn't been fetched\r\n        <GridPlaceholder />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { Route } from 'react-router'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport { useAchievements, useFetchAchievements } from 'state/achievements/hooks'\r\nimport { AchievementFetchStatus } from 'state/types'\r\nimport { UserNftInitializationState } from 'state/nftMarket/types'\r\nimport useFetchUserNfts from './hooks/useFetchUserNfts'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport ProfileHeader from './components/ProfileHeader'\r\nimport TabMenu from './components/TabMenu'\r\nimport Achievements from './components/Achievements'\r\nimport ActivityHistory from './components/ActivityHistory'\r\nimport SubMenu from './components/SubMenu'\r\nimport UserNfts from './components/UserNfts'\r\n\r\nconst TabMenuWrapper = styled(Box)`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%);\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    left: auto;\r\n    transform: none;\r\n  }\r\n`\r\n\r\nconst ConnectedProfile = () => {\r\n  const { profile, isLoading: isProfileLoading } = useProfile()\r\n  const { achievements, achievementFetchStatus } = useAchievements()\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n\r\n  useFetchAchievements()\r\n  useFetchUserNfts()\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader position=\"relative\">\r\n        <ProfileHeader\r\n          accountPath={account}\r\n          profile={profile}\r\n          achievements={achievements}\r\n          nftCollected={userNfts.length}\r\n          isProfileLoading={isProfileLoading}\r\n          isNftLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\r\n          isAchievementsLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\r\n        />\r\n        <TabMenuWrapper>\r\n          <TabMenu />\r\n        </TabMenuWrapper>\r\n      </MarketPageHeader>\r\n      <Page style={{ minHeight: 'auto' }}>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\r\n          <Achievements achievements={achievements} points={profile?.points} />\r\n        </Route>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\r\n          <SubMenu />\r\n          <ActivityHistory />\r\n        </Route>\r\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\r\n          <SubMenu />\r\n          <UserNfts />\r\n        </Route>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConnectedProfile\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { State, AchievementState } from '../types'\r\nimport { fetchAchievements } from '.'\r\n\r\nexport const useFetchAchievements = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchAchievements(account))\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useAchievements = () => {\r\n  const achievements: AchievementState = useSelector((state: State) => state.achievements)\r\n  return achievements\r\n}\r\n","import { useEffect, useMemo, useState } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetCollections } from 'state/nftMarket/hooks'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { Profile } from 'state/types'\r\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\r\n\r\nconst useNftsForAddress = (account: string, profile: Profile, isProfileFetching: boolean) => {\r\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  useEffect(() => {\r\n    const getNfts = async () => {\r\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\r\n      setCombinedNfts(completeNftData)\r\n      setIsLoading(false)\r\n    }\r\n\r\n    if (!isProfileFetching && !isEmpty(collections)) {\r\n      setIsLoading(true)\r\n      getNfts()\r\n    }\r\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\r\n\r\n  return { nfts: combinedNfts, isLoading }\r\n}\r\n\r\nexport default useNftsForAddress\r\n","import React from 'react'\r\nimport { Grid, Text, Flex } from '@pancakeswap/uikit'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport NoNftsImage from './NoNftsImage'\r\n\r\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      {/* User has no NFTs */}\r\n      {nfts.length === 0 && !isLoading ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFTs found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : // User has NFTs and data has been fetched\r\n      nfts.length > 0 ? (\r\n        <Grid\r\n          gridGap=\"16px\"\r\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n          alignItems=\"start\"\r\n        >\r\n          {nfts.map((nft) => {\r\n            const { marketData } = nft\r\n\r\n            return (\r\n              <CollectibleLinkCard\r\n                key={`${nft.tokenId}-${nft.collectionName}`}\r\n                nft={nft}\r\n                currentAskPrice={\r\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\r\n                }\r\n              />\r\n            )\r\n          })}\r\n        </Grid>\r\n      ) : (\r\n        // User NFT data hasn't been fetched\r\n        <GridPlaceholder />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { Route, useParams } from 'react-router'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport ProfileHeader from './components/ProfileHeader'\r\nimport TabMenu from './components/TabMenu'\r\nimport Achievements from './components/Achievements'\r\nimport ActivityHistory from './components/ActivityHistory'\r\nimport SubMenu from './components/SubMenu'\r\nimport useNftsForAddress from './hooks/useNftsForAddress'\r\nimport UnconnectedProfileNfts from './components/UnconnectedProfileNfts'\r\n\r\nconst TabMenuWrapper = styled(Box)`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%);\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    left: auto;\r\n    transform: none;\r\n  }\r\n`\r\n\r\nconst UnconnectedProfile = () => {\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { profile: profileHookState, isFetching: isProfileFetching } = useProfileForAddress(accountAddress)\r\n  const { profile } = profileHookState || {}\r\n  const { achievements, isFetching: isAchievementFetching } = useAchievementsForAddress(accountAddress)\r\n  const { nfts, isLoading: isNftLoading } = useNftsForAddress(accountAddress, profile, isProfileFetching)\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader position=\"relative\">\r\n        <ProfileHeader\r\n          accountPath={accountAddress}\r\n          profile={profile}\r\n          achievements={achievements}\r\n          nftCollected={nfts.length}\r\n          isProfileLoading={isProfileFetching}\r\n          isNftLoading={isNftLoading}\r\n          isAchievementsLoading={isAchievementFetching}\r\n        />\r\n        <TabMenuWrapper>\r\n          <TabMenu />\r\n        </TabMenuWrapper>\r\n      </MarketPageHeader>\r\n      <Page style={{ minHeight: 'auto' }}>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\r\n          <Achievements achievements={achievements} points={profile?.points} />\r\n        </Route>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\r\n          <SubMenu />\r\n          <ActivityHistory />\r\n        </Route>\r\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\r\n          <SubMenu />\r\n          <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\r\n        </Route>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UnconnectedProfile\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useParams } from 'react-router'\r\nimport { isAddress } from 'utils'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectedProfile from './ConnectedProfile'\r\nimport UnconnectedProfile from './UnconnectedProfile'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport ProfileHeader from './components/ProfileHeader'\r\nimport NoNftsImage from './components/NoNftsImage'\r\n\r\nconst NftProfile = () => {\r\n  const { account } = useWeb3React()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { t } = useTranslation()\r\n\r\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\r\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\r\n\r\n  if (invalidAddress) {\r\n    return (\r\n      <>\r\n        <MarketPageHeader position=\"relative\">\r\n          <ProfileHeader\r\n            accountPath={accountAddress}\r\n            profile={null}\r\n            achievements={null}\r\n            nftCollected={null}\r\n            isAchievementsLoading={false}\r\n            isNftLoading={false}\r\n            isProfileLoading={false}\r\n          />\r\n        </MarketPageHeader>\r\n        <Page style={{ minHeight: 'auto' }}>\r\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n            <NoNftsImage />\r\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\r\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\r\n            </Text>\r\n          </Flex>\r\n        </Page>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return <>{isConnectedProfile ? <ConnectedProfile /> : <UnconnectedProfile />}</>\r\n}\r\n\r\nexport default NftProfile\r\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React from 'react'\r\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\n\r\ninterface GridPlaceholderProps extends GridProps {\r\n  numItems?: number\r\n}\r\n\r\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\r\n  <Box {...props}>\r\n    <Skeleton height=\"258px\" mb=\"8px\" />\r\n    <Skeleton width=\"30%\" mb=\"4px\" />\r\n    <Skeleton width=\"45%\" mb=\"16px\" />\r\n    <Skeleton />\r\n  </Box>\r\n)\r\n\r\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\r\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\r\n    {times(numItems).map((itemKey) => (\r\n      <GridPlaceholderItem key={itemKey} />\r\n    ))}\r\n  </Grid>\r\n)\r\n\r\nexport default GridPlaceholder\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React, { ElementType, ReactNode } from 'react'\r\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst SecondaryCard = styled(Text)`\r\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\r\n  border-radius: 16px;\r\n`\r\n\r\nSecondaryCard.defaultProps = {\r\n  p: '24px',\r\n}\r\n\r\ninterface IconStatBoxProps extends TextProps {\r\n  icon: ElementType\r\n  title: ReactNode\r\n  subtitle: ReactNode\r\n  isDisabled?: boolean\r\n}\r\n\r\nconst IconStatBox: React.FC<IconStatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\r\n  return (\r\n    <SecondaryCard {...props}>\r\n      <Flex alignItems=\"start\">\r\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\r\n        <div>\r\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\r\n            {title}\r\n          </Heading>\r\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\r\n            {subtitle}\r\n          </Text>\r\n        </div>\r\n      </Flex>\r\n    </SecondaryCard>\r\n  )\r\n}\r\n\r\nexport default IconStatBox\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n"],"sourceRoot":""}