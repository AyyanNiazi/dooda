{"version":3,"sources":["getWeb3.js","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","storageValue","accounts","contract","nftContract","setNumber","nftValue","undefined","values","setValues","getContracts","eth","getAccounts","net","getId","networkId","deployedNetwork","Box","networks","nft","MyNft","instance","Contract","abi","address","nftInstance","alert","error","getValue","methods","retrieve","call","response","uri","res","owner","fetch","then","json","data","useEffect","className","src","image","width","height","alt","name","tokenId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8434520.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;","import {useEffect, useState} from 'react';\nimport Box from \"./contracts/Box.json\";\nimport MyNft from \"./contracts/MyNft.json\";\nimport getWeb3 from \"./getWeb3\";\n\n// \"contracts\": \"file:../build/contracts\"\n\n\nfunction App() {\n  const [values, setValues] = useState( { \n    storageValue: 0, \n    web3: null, \n    accounts: null, \n    contract: null,\n    nftContract: null,\n    setNumber: 0,\n    nftValue: undefined\n  })\n  \n  const getContracts = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      \n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Box.networks[networkId];\n      const nft = MyNft.networks[networkId];\n      console.log(nft, deployedNetwork, accounts, networkId)\n      const instance = new web3.eth.Contract(\n        Box.abi,\n        deployedNetwork?.address,\n      );\n      const nftInstance = new web3.eth.Contract(\n        MyNft.abi,\n        nft?.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      setValues( { ...values,  web3, accounts, contract: instance, nftContract: nftInstance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const storeValue = async value => {\n\n    // Stores a given value, 5 by default.\n   const response = await values.contract.methods.store(value).send({ from: values.accounts[0] });\n   console.log(response);\n   getValue()\n\n    // Get the value from the contract to prove it worked.\n    \n  }\n\n  \n  const getValue = async () => {\n    if(!values.contract) return\n    const response = await values.contract.methods.retrieve().call();\n    const res = await values.nftContract.methods.uri(1).call();\n    const owner = await values.nftContract.methods.owner().call();\n    fetch(res)\n    .then(res=> res.json())\n    .then(data => setValues({ ...values, nftValue: {...data, owner} }) )\n    // Update state with the result.\n    // setValues({ ...values, storageValue: response, nftValue: res });\n    console.log('get', response, res, owner)\n  }\n\n  useEffect(() => {\n  getContracts()\n  }, [])\n\n  useEffect(() => {\n    getValue()\n  }, [values.contract])\n\n\n\n  return (\n    !values.nftValue ?\n    <h2>Loading... </h2>\n    :\n    <div className=\"App\">\n        <img src={values.nftValue?.image} width=\"160\" height=\"160\" alt=\"NFT\" />\n        <h2> Nft Name:  {values.nftValue?.name} </h2>\n        <h2> Token Id:  {values.nftValue?.tokenId} </h2>\n        <h2> Owner:  {values.nftValue?.owner} </h2>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}